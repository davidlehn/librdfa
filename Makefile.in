# The top-level Makefile that is used to build 

# setup variables from configure
prefix = @prefix@
exec_prefix = @exec_prefix@
libdir = @libdir@
includedir = @includedir@

# pkg-config dirs
pkgconfigdir = @libdir@/pkgconfig

# State the platforms for which we are building
BUILD_FOR_PYTHON=@BUILD_FOR_PYTHON@

VERSION = @VERSION@

SUBDIRS := c
ifeq ($(BUILD_FOR_PYTHON),yes)
SUBDIRS += python
endif
SUBDIRS += tests

ifdef PRINT_DIRECTORIES
MAKE_CMD = $(MAKE) -j -l 5.0 
MAKE_DIR = $(MAKE_CMD) -C $(dir)
else
MAKE_CMD = $(MAKE) -j -l 5.0 --no-print-directory -s 
MAKE_DIR = $(MAKE_CMD) -C $(dir)
endif

LIBS_DIR = @RDFADIR@/libs

.PHONY: all verbose clean test docs

all: docs
	@$(foreach dir,$(SUBDIRS),$(MAKE_DIR) build-objects build-libraries &&) true
	@$(foreach dir,$(SUBDIRS),$(MAKE_DIR) build-executables &&) true

clean:
	@$(foreach dir,$(SUBDIRS),MAKE_CLEAN_ACTIVE=true $(MAKE_DIR) clean &&) true
	@rm -rf libs/*
	@rm -rf installers/packages
	@echo "Removed all objects and libraries."

tests: all
	LD_LIBRARY_PATH=@RDFADIR@/libs tests/dist/curies
	LD_LIBRARY_PATH=@RDFADIR@/libs tests/dist/rdfa2n3 tests/testsuite/0001.xhtml

docs:
	@$(MAKE_DIR) docs

install-librdfa:
	@echo "Installing librdfa libraries to $(PREFIX)$(libdir) ..."
	@install -d $(PREFIX)$(libdir)
	@install -m 644 $(LIBS_DIR)/librdfa.so $(PREFIX)$(libdir)/librdfa.so.$(VERSION)
	@ln -sf librdfa.so.$(VERSION) $(PREFIX)$(libdir)/librdfa.so

install-librdfa-dev:
	@echo "Installing librdfa development support to $(PREFIX)$(libdir) ..."
	@install -d $(PREFIX)$(libdir)
	@install -d $(PREFIX)$(includedir)
	@install -d $(PREFIX)$(pkgconfigdir)
	@install -m 644 $(LIBS_DIR)/librdfa.a $(PREFIX)$(libdir)/librdfa.a
	@install -m 644 c/rdfa.h $(PREFIX)$(includedir)
	@install -m 644 c/rdfa_utils.h $(PREFIX)$(includedir)
	@install -m 644 librdfa.pc $(PREFIX)$(pkgconfigdir)

ifeq ($(BUILD_FOR_PYTHON),yes)
install-python:
	@echo "Installing python extensions to $(PREFIX)$(libdir)/python$(PYVER)/site-packages ..."
	@install -d $(PREFIX)$(libdir)/python$(PYVER)/site-packages
	@install -m 644 python/dist/rdfa.py $(PREFIX)$(libdir)/python$(PYVER)/site-packages
	@install -m 644 python/dist/python$(PYVER)-rdfa.so $(PREFIX)$(libdir)/python$(PYVER)/site-packages/_rdfa.so
else
install-python:
endif

packages: all
	@echo "Generating Debian packages..."
	@mkdir -p installers/packages
	@ln -sf installers/debian debian
	@dpkg-buildpackage -us -uc -rfakeroot
	@mv ../*rdfa*@RELEASE@*deb installers/packages
	@echo "Generating RPM packages..."
	@cd installers/packages && fakeroot alien --to-rpm -k --scripts *deb
	@echo "Generating TGZ packages..."
	@cd installers/packages && fakeroot alien --to-tgz -k --scripts *deb
	@echo "Generating Solaris packages..."
	@cd installers/packages && fakeroot alien --to-pkg -k --scripts *deb
	@echo "Generating Stampede packages..."
	@cd installers/packages && fakeroot alien --to-slp -k --scripts *deb

ifeq (@OS@,mingw32)
install-windows:
	@echo "Generating Windows ZIP release..."
	@mkdir -p installers/librdfa-windows-@RELEASE@
	@cp c/rdfa.h installers/librdfa-windows-@RELEASE@
	@cp c/rdfa_utils.h installers/librdfa-windows-@RELEASE@
	@cp libs/rdfa.dll installers/librdfa-windows-@RELEASE@
	@cp libs/rdfa.lib installers/librdfa-windows-@RELEASE@
	@cd installers && zip -r librdfa-@VERSION@-windows-@RELEASE@.zip \
		librdfa-windows-@RELEASE@
	@rm -rf installers/librdfa-windows-@RELEASE@
endif

ifeq (@OS@,macos)
install-macos:
	@echo "Generating Mac OS X ZIP release..."
	@mkdir -p installers/librdfa-macos-@RELEASE@
	@cp c/rdfa.h installers/librdfa-macos-@RELEASE@
	@cp c/rdfa_utils.h installers/librdfa-macos-@RELEASE@
	@cp libs/librdfa.dylib installers/librdfa-macos-@RELEASE@
	@cp libs/librdfa.a installers/librdfa-macos-@RELEASE@
	@cd installers && zip -r librdfa-@VERSION@-macos-@RELEASE@.zip \
		librdfa-macos-@RELEASE@
	@rm -rf installers/librdfa-macos-@RELEASE@
endif


install: install-librdfa install-librdfa-dev install-python

verbose:
	PRINT_DIRECTORIES=true $(MAKE) all
