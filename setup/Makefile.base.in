# This file contains basic Makefile includes that contain all building
# instructions for all binaries and packages.

# Directories
RDFA = @RDFADIR@
CURRENT_DIR = $(shell pwd)
BUILD_DIR = build
DIST_DIR = dist

# Base rules
.PHONY: all build-directories build-objects build-libraries build-executables clean clean-objects clean-libraries $(ALL_EXECUTABLES)

all: build-directories build-objects build-libraries build-executables

# Programs
CC = @CC@
AR = @AR@
OS = @OS@
DLLWRAP = @DLLWRAP@

# General flags
LIB_DIR = $(RDFA)/libs
LDFLAGS = -L$(LIB_DIR)
CC_FLAGS = -Wall -fPIC -g
INCLUDES = -I/usr/include -I$(RDFA)/c -I$(RDFA)/tests
AR_FLAGS = cr

# Windows flags
ifeq ($(OS),mingw32)
CC_FLAGS = -Wall -g -D_WIN32_WINNT=0x0501 -DRDFA_API_EXPORT
INCLUDES += -I$(RDFA)/3rdparty/expat/include
LDFLAGS += -L$(RDFA)/3rdparty/expat
DLLWRAP_FLAGS = --as=$(AS) --export-all --driver-name $(CC) -s
endif

# Dependencies and objects
DEPENDENCIES := $(patsubst %.c,$(BUILD_DIR)/%.P, $(SOURCES))
OBJECTS := $(patsubst %.c,$(BUILD_DIR)/%.o, $(SOURCES))
OBJECTS += $(patsubst %,$(BUILD_DIR)/%.o, $(EXECUTABLES))
LIBDEPS := $(DYNAMIC_LINK_LIBRARIES)

# All source, dependency and library variables
ALL_SOURCES := $(patsubst %.c,$(BUILD_DIR)/%.c, $(SOURCES))
ALL_SOURCES += $(patsubst %,$(BUILD_DIR)/%.c, $(EXECUTABLES))
ALL_DEPENDENCIES += $(DEPENDENCIES)
ALL_OBJECTS += $(OBJECTS)

ALL_LIBRARIES := $(patsubst %,$(DIST_DIR)/lib%.so, $(LIBRARIES)) 
ALL_LIBRARIES += $(patsubst %,$(DIST_DIR)/lib%.a, $(LIBRARIES)) 
ifeq ($(OS),mingw32)
ALL_LIBRARIES := $(patsubst %,$(DIST_DIR)/%.lib, $(LIBRARIES))
ALL_LIBRARIES += $(patsubst %,$(DIST_DIR)/%.dll, $(LIBRARIES))
endif
ifeq ($(OS),darwin8.9.1) 
ALL_LIBRARIES := $(patsubst %,$(DIST_DIR)/lib%.dylib, $(LIBRARIES))
ALL_LIBRARIES += $(patsubst %,$(DIST_DIR)/lib%.a, $(LIBRARIES))
endif

ifeq ($(OS),mingw32)
LIBDEPS := $(DYNAMIC_WINDOWS_LIBRARIES)
ALL_EXECUTABLES := $(patsubst %,$(DIST_DIR)/%.exe, $(EXECUTABLES))
else
LIBDEPS := $(DYNAMIC_LINUX_LIBRARIES)
ALL_EXECUTABLES := $(patsubst %,$(DIST_DIR)/%, $(EXECUTABLES))
endif

ALL_DIRECTORIES += $(BUILD_DIR) $(DIST_DIR)
ifndef MAKE_CLEAN_ACTIVE
-include $(ALL_DEPENDENCIES)
endif

$(ALL_DIRECTORIES):
	mkdir -p $@

$(ALL_SOURCES):
	@mkdir -p $(dir $@)
	@ln -sf $(subst $(BUILD_DIR)/,$(CURRENT_DIR)/,$@) $@

%.o %.P: %.c
	@echo "Building $(basename $@).o..."
	@$(CC) $(CC_FLAGS) -c -MD -o $(basename $@).o $(INCLUDES) -I. $<
	@cp $(basename $@).d $(basename $@).P; \
		sed -e 's/#.*//' -e 's/^[^:]*: *//' -e 's/ *\\$$//' -e '/^$$/ d' -e 's/$$/ :/' < $(basename $@).d >> $(basename $@).P; \
		rm -f $(basename $@).d

%.so: $(OBJECTS)
	@echo "Building $@..."
	@$(CC) $(LDFLAGS) -shared -o $@ $(OBJECTS) $(DYNAMIC_LINK_LIBRARIES:%=-l%)
	@mkdir -p $(LIB_DIR)
	@ln -sf $(CURRENT_DIR)/$@ $(LIB_DIR)/$(@F)

%.dylib: $(OBJECTS)
	@echo "Building $@..."
	$(CC) $(LDFLAGS) -dynamiclib -o $@ $(OBJECTS) $(DYNAMIC_LINK_LIBRARIES:%=-l%)
	@mkdir -p $(LIB_DIR)
	@ln -sf $(CURRENT_DIR)/$@ $(LIB_DIR)/$(@F)

%.dll: $(OBJECTS)
	@echo "Building $@..."
	@$(CC) --shared $(LDFLAGS) --export-all --output-def,$(@:.dll=.def),--out-implib,$(@:.dll=.lib) -o $@ $^ $(DYNAMIC_LINK_LIBRARIES:%=-l%) --exclude-symbols,$(EXCLUDE_DLL_SYMBOLS)
	@mkdir -p $(LIB_DIR)
	@ln -sf $(CURRENT_DIR)/$@ $(LIB_DIR)/$(@F)

%.lib: $(OBJECTS)
	@echo "Building $@..."
	@$(AR) $(AR_FLAGS) $@ $(OBJECTS)
	@mkdir -p $(LIB_DIR)
	@ln -sf $(CURRENT_DIR)/$@ $(LIB_DIR)/$(@F)

%.a: $(OBJECTS)
	@echo "Building $@..."
	@$(AR) $(AR_FLAGS) $@ $(OBJECTS)
	@mkdir -p $(LIB_DIR)
	@ln -sf $(CURRENT_DIR)/$@ $(LIB_DIR)/$(@F)

ifdef EXECUTABLES
ifeq ($(OS),mingw32)
$(STATIC_WINDOWS_LIBRARIES):
	# This is a fake target to override the default .lib build
$(ALL_EXECUTABLES): $(ALL_SOURCES) $(ALL_OBJECTS)
	@echo "Building $(@F)..."
	@$(CC) $(CC_FLAGS) $(LDFLAGS) -o $@ $(BUILD_DIR)/$(basename $(@F)).o $(DYNAMIC_LINK_LIBRARIES:%=-l%) $(DYNAMIC_WINDOWS_LIBRARIES:%=-l%)
else
#$(STATIC_LINUX_LIBRARIES):
#	# This is a fake target to override the default .a build
$(ALL_EXECUTABLES): $(ALL_SOURCES) $(ALL_OBJECTS) 
	@echo "Building $(@F)..."
	$(CC) $(CC_FLAGS) $(LDFLAGS) -o $@ $(BUILD_DIR)/$(@F).o $(DYNAMIC_LINK_LIBRARIES:%=-l%) $(DYNAMIC_UNIX_LIBRARIES:%=-l%)
endif
endif

build-objects: $(ALL_DIRECTORIES) $(ALL_SOURCES) $(ALL_DEPENDENCIES) $(ALL_OBJECTS)

build-libraries: $(ALL_DIRECTORIES) $(ALL_LIBRARIES)

build-executables: $(ALL_DIRECTORIES) $(ALL_EXECUTABLES)

clean: clean-libraries clean-objects

clean-objects:
	@rm -rf $(BUILD_DIR)

clean-libraries:
	@rm -rf $(DIST_DIR)

vars:
	@echo OS: $(OS)
	@echo CC_FLAGS: $(CC_FLAGS)
	@echo INCLUDES: $(INCLUDES)
	@echo LDFLAGS: $(LDFLAGS)
	@echo DLLWRAP_FLAGS: $(DLLWRAP_FLAGS)
	@echo ALL_SOURCES: $(ALL_SOURCES)
	@echo ALL_DEPENDENCIES: $(ALL_DEPENDENCIES)
	@echo ALL_OBJECTS: $(ALL_OBJECTS)
	@echo ALL_LIBRARIES: $(ALL_LIBRARIES)
	@echo ALL_EXECUTABLES: $(ALL_EXECUTABLES)
	@echo ALL_DIRECTORIES: $(ALL_DIRECTORIES)
	@echo ALL_LIBRARIES: $(ALL_LIBRARIES)
