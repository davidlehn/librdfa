#!/usr/bin/env python
#
# Reads in an XHTML+RDFa file and outputs the triples generated by the file
# in N3 format.
import sys, os
sys.path += ("../python/dist/linux",)
import rdfa

##
# Called whenever a triple is generated by the underlying implementation.
#
# @param rdf the rdf object to use when storing data.
# @param subject the subject of the triple.
# @param predicate the predicate for the triple.
# @param obj the object of the triple.
# @param object_type the type for the object in the triple.
# @param datatype the datatype for the object in the triple.
# @param language the language for the object in the triple.
def handle_triple(rdf, subject, predicate, obj, object_type, datatype,
                  language):
    
    if(object_type == rdfa.RDF_TYPE_NAMESPACE_PREFIX):
        rdf['namespaces'][predicate] = obj
    else:
        rdf['triples'].append(
            (subject, predicate, obj, object_type, datatype, language))
        
##
# Called whenever the processing buffer for the C-side needs to be re-filled.
#
# @param dataFile the file-like object to use when reading in the data stream.
# @param bufferSize the size of the buffer to return. Returning anything less
#                   than bufferSize will halt execution after the returned
#                   buffer has been processed.
def handle_buffer(dataFile, bufferSize):
    return dataFile.read()

##
# Applies the namespaces to the given string in an attempt to shorten the
# string.
#
# @param namespaces the list of namespaces to use.
# @param iri the IRI to prefix.
#
# @return the prefixed IRI if it is prefixable.
def prefix_namespace(namespaces, iri):
    rval = iri

    for key, value in namespaces.items():
        rval = rval.replace(value, key + ":")

    return rval

##
# Prints RDF/XML given an object with pre-defined namespaces and triples.
#
# @param rdf the rdf dictionary object that contains namespaces and triples.
def print_rdf(rdf):
    print '<?xml version="1.0" encoding="utf-8"?>'
    print '<rdf:RDF'
    print ' xmlns:rdf="http://www.w3.org/1999/02/22-rdf-syntax-ns#"'

    for prefix, uri in rdf['namespaces'].items():
        print " xmlns:%s=\"%s\"" % (prefix, uri)

    print '>'

    for triple in rdf['triples']:
        subject = triple[0]
        predicate = prefix_namespace(rdf['namespaces'], triple[1])
        obj = triple[2]
        obj_type = triple[3]
        desc = "<rdf:Description rdf:about=\"%s\">\n" % (subject)

        if(obj_type == rdfa.RDF_TYPE_PLAIN_LITERAL):
            desc += " <%s>%s</%s>\n" % (predicate, obj, predicate)
        else:
            desc += " <%s>%s</%s>\n" %(predicate, "UNKNOWN LITERAL", predicate)
        desc += '</rdf:Description>'
        print desc
        
    print '</rdf:RDF>'

##
# The main entry point for the script.
#
# @param argv the argument list passed to the program.
# @param stdout the standard output stream assigned to the program.
# @param environ the execution environment for the program.
def main(argv, stdout, environ):
    print "creating parser"
    parser = rdfa.RdfaParser("http://www.w3.org/2006/07/SWD/RDFa/testsuite/xhtml1-testcases/0001.xhtml")

    print "opening", argv[1]
    dataFile = open(argv[1], "r")
    rdf = {}
    rdf['namespaces'] = {}
    rdf['triples'] = []
    
    print "created parser"
    parser.setTripleHandler(handle_triple, rdf)
    print "set triple handler"
    parser.setBufferHandler(handle_buffer, dataFile)
    print "set buffer handler"

    print "parsing..."
    parser.parse()
    print "completed parsing"
    dataFile.close()

    print_rdf(rdf)
    
##
# Run the rdfa2n3 python application.
if __name__ == "__main__":
    main(sys.argv, sys.stdout, os.environ)
